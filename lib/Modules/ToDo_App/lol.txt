                var titleController = TextEditingController();
                var timeController = TextEditingController();
                var dateController = TextEditingController();
                var scaffoldkey = GlobalKey<ScaffoldState>();
                var formkey = GlobalKey<FormState>();

                if (formkey.currentState!.validate()) {
                  cubit.insertData(
                      title: titleController.text,
                      time: timeController.text,
                      date: dateController.text,
                      type: AppCubit.get(context).selectedItem);
                }
                Form(
                  key: formkey,
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      TextFormField(
                        controller: titleController,
                        keyboardType: TextInputType.text,
                        validator: (value) {
                          if (value!.isEmpty) {
                            return "Required";
                          }
                          return null;
                        },
                        decoration: InputDecoration(
                          //hintText: "Email Address",
                          labelText: "Task Title",
                          prefixIcon: Icon(Icons.title_outlined),
                          border: OutlineInputBorder(),
                        ),
                      ),
                      SizedBox(
                        height: 15,
                      ),
                      TextFormField(
                        controller: timeController,
                        keyboardType: TextInputType.datetime,
                        validator: (value) {
                          if (value!.isEmpty) {
                            return "Required";
                          }
                          return null;
                        },
                        onTap: () {
                          showTimePicker(
                              context: context,
                              initialTime: TimeOfDay.now())
                              .then((value) {
                            timeController.text =
                                value!.format(context).toString();
                          });
                        },
                        decoration: InputDecoration(
                          //hintText: "Email Address",
                          labelText: "Task Time",
                          prefixIcon:
                          Icon(Icons.watch_later_outlined),
                          border: OutlineInputBorder(),
                        ),
                      ),
                      SizedBox(
                        height: 15,
                      ),
                      TextFormField(
                        controller: dateController,
                        keyboardType: TextInputType.datetime,
                        validator: (value) {
                          if (value!.isEmpty) {
                            return "Required";
                          }
                          return null;
                        },
                        onTap: () {
                          showDatePicker(
                              context: context,
                              initialDate: DateTime.now(),
                              firstDate: DateTime.now(),
                              lastDate:
                              DateTime.parse("2023-08-30"))
                              .then((value) {
                            dateController.text =
                                DateFormat.yMMMd().format(value!);
                          });
                        },
                        decoration: InputDecoration(
                          //hintText: "Email Address",
                          labelText: "Task Date",
                          prefixIcon:
                          Icon(Icons.date_range_outlined),
                          border: OutlineInputBorder(),
                        ),
                      ),
                      SizedBox(
                        height: 10.00,
                      ),
                      Padding(
                        padding: const EdgeInsets.symmetric(
                            horizontal: 20.00),
                        child: Container(
                            width: double.infinity,
                            child: DropdownButton(
                                value: cubit.selectedItem,
                                items: cubit.types.map((item) {
                                  return DropdownMenuItem(
                                      value: item,
                                      child: Text(item));
                                }).toList(),
                                onChanged: (value) => cubit
                                    .changeDropDownItem(value))),
                      )
                    ],
                  ),
                ),